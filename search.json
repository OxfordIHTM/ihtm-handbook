[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Open and Reprodubile Science in R",
    "section": "",
    "text": "Preface\nThe Open and Reproducible Science in R sub-module of the MSc in International Health and Tropical Medicine is designed to equip students with the knowledge and skills necessary to conduct both academic research and more importantly real-world data analysis that is transparent, reproducible, and in line with the principles of open science.\nThis tecnical handbook serves as the go-to guide for MSc IHTM students to the various tools, technologies, and processes that they will be learning and using within the module.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#organisation",
    "href": "index.html#organisation",
    "title": "Open and Reprodubile Science in R",
    "section": "Organisation",
    "text": "Organisation\nThis handbook is divided into three sections:\n\n1. Tools\nThis section cover topics on the various tools and technologies that are to be used and/or introduced in the module. The R language and environment for statistical computing and graphics is primary of these as the module is specific to R. All other tools and tecnologies are either built specific for use with R (e.g. RStudio which is the IDE of choice for the module and for this handbook) or are general tools that enhance the userR experience and/or supports known and accepted best practices for open and reproducible science using R.\n\n\n2. Practices\nThis section covers topics on recommended best practices for optimal usage and maintenance of R and RStudio.\n\n\n3. Processes\nThis section covers topics on scientific/data analysis workflows with a focus on steps in initiating and setting up and participating and contributing to such projects within an open and reproducible framework.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Open and Reprodubile Science in R",
    "section": "How to use",
    "text": "How to use\nEven though all efforts have been made to order the chapters in a way that is coherent and logical, this handbook is designed such that chapters are standalone topics in of themselves and uses cross-referencing between chapters to make links to the various learning topics/concepts. As such, the best use of this handbook is to use each chapter as a reference for more in-depth discussion of a topic discussed in class rather than a book to read from start to finish.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "All about R\nR is a language and environment for statistical computing and graphics. It is a GNU project which is similar to the S language and environment which was developed at Bell Laboratories (formerly AT&T, now Lucent Technologies) by John Chambers and colleagues. R can be considered as a different implementation of S. There are some important differences, but much code written for S runs unaltered under R.\nR provides a wide variety of statistical (linear and nonlinear modelling, classical statistical tests, time-series analysis, classification, clustering, etc.) and graphical techniques, and is highly extensible. The S language is often the vehicle of choice for research in statistical methodology, and R provides an open source route to participation in that activity.\nOne of R’s strengths is the ease with which well-designed publication-quality plots can be produced, including mathematical symbols and formulae where needed. Great care has been taken over the defaults for the minor design choices in graphics, but the user retains full control.\nR is available as free software under the terms of the Free Software Foundation’s GNU General Public License in source code form. It compiles and runs on a wide variety of UNIX platforms and similar systems (including FreeBSD and Linux), Windows and MacOS.\nR is unique in that it is not general-purpose. It does not compromise by trying to do a lot of things. It does a few things very well, mainly statistical analysis and data visualization. While you can find data analysis and machine learning libraries for languages like Python, R has many statistical functionalities built into its core. No third-party libraries are needed for much of the core data analysis you can do with the language.\nBut even with this specific use case, it is used in every industry you can think of because a modern business runs on data. Using past data, data scientists and data analysts can determine the health of a business and give business leaders actionable insights into the future of their company.\nJust because R is specifically used for statistical analysis and data visualization doesn’t mean its use is limited. It’s actually quite popular, ranking 19th in the TIOBE index of the most popular programming languages.\nAcademics, scientists, and researchers use R to analyze the results of experiments. In addition, businesses of all sizes and in every industry use it to extract insights from the increasing amount of daily data they generate.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "introduction.html#open-and-reproducible-science",
    "href": "introduction.html#open-and-reproducible-science",
    "title": "Introduction",
    "section": "Open and reproducible science",
    "text": "Open and reproducible science\nOpen and reproducible science is the practice of science in such a way that others can collaborate and contribute and where research data, lab notes and other research processes are freely available, under terms that enable reuse, redistribution and reproduction of the research and its underlying data and methods. Reproducible research means that research data and code are made available so that others are able to reach the same results as are claimed in scientific outputs. Closely related is the concept of replicability, the act of repeating a scientific methodology to reach similar conclusions. These concepts are core elements of empirical research.\nOpen science is important because it enhances the accessibility, transparency, and collaboration of scientific research.\nOpen science makes research data, publications, and resources freely available to anyone, regardless of their location, institutional affiliation, or financial situation. This democratises knowledge and ensures that even those outside of well-funded research institutions can access the latest scientific findings.\nBy making data, methods, and results openly available, open science allows other researchers to verify, replicate, and build upon previous work. This transparency is essential for the self-correcting nature of science, helping to ensure the reliability and integrity of research findings.\nWhen data and findings are openly shared, other researchers can more quickly build on existing work, leading to faster scientific progress. This is particularly important in fields like medicine or environmental science, where rapid advancements can have significant societal impacts.\nOpen science fosters collaboration across disciplines, institutions, and borders. Researchers can combine their expertise and resources to tackle complex problems, leading to more innovative solutions. Open data and resources also encourage citizen science, where the general public can contribute to scientific research.\nBy making research processes and findings open and accessible, science becomes more transparent to the public, which can increase trust in scientific research. Open science also allows the public to engage more directly with science, fostering a greater understanding and appreciation of scientific work.\nOpen science reduces duplication of effort by making data and methods available for reuse. Researchers can build on existing work rather than starting from scratch, which can save time and resources. Additionally, open access to research outputs can reduce costs for institutions and researchers who would otherwise need to pay for access to publications.\nMany of the world’s most pressing challenges, such as climate change, pandemics, and poverty, require global collaboration and knowledge-sharing. Open science facilitates this by making research outputs accessible to scientists and policymakers worldwide, particularly in low- and middle-income countries that may lack access to expensive scientific resources.\nIn essence, open science enhances the efficiency, equity, and impact of scientific research, making it a critical approach for advancing knowledge and addressing global challenges.\nThe Open and Reproducible Science in R module is designed to give MSc IHTM students a foundational understanding and appreciation of the pillars of open science more broadly and within that the concepts, methods and tools for reproducible research more specifically. To further the students’ learning, practical examples and exercises are walked through and discussed using the R language for statistical computing as a way to practically demonstrate these concepts.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "installing-software.html",
    "href": "installing-software.html",
    "title": "1  Installing and setting up tools",
    "section": "",
    "text": "1.1 Installing R, RStudio, and git",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and setting up tools</span>"
    ]
  },
  {
    "objectID": "installing-software.html#sec-install-r",
    "href": "installing-software.html#sec-install-r",
    "title": "1  Installing and setting up tools",
    "section": "",
    "text": "WindowsmacOS\n\n\n\nStep 1: Download and install R\nImportant that R is installed first. R is the main software and is needed for RStudio to work properly. R should always be installed first.\nGo to https://cran.r-project.org and click on the link that says Download R for Windows. In the following page, click on the link that says install R for the first time.\nThen click on Download R-4.X.X for Windows (latest release version). This will start the download process.\nOnce downloaded, go to the .exe file in your Downloads folder, double-click and follow all the install prompts, selecting recommended options all the time.\n\n\nStep 2: Download and install RStudio\nThis step requires that Step 1 has been done and was successful.\nGo to https://posit.co/download/rstudio-desktop/ and select the download specific for your Windows machine.\nOnce downloaded, double-click on .exe file downloaded to your Downloads folder and then follow all install prompts, always selecting recommended options.\n\n\nStep 3: Download and install Rtools\nFor the things that you will be taught in the Open and Reproducibile Science sub-module, you we will need to expand the installation of R by installing the Rtools software.\nGo to https://cran.r-project.org/bin/windows/Rtools/ and choose to download the latest version of the installer (which is the Rtools version compatible with the R version you have installed in Step 1).\nOnce you have downloaded the .exe file, double-click on the .exe file and follow all install prompts. Choose all the recommended options.\n\n\nStep 4: Download and install Git for Windows\nFor the things that you will be taught in the Open and Reproducibile Science sub-module, you we will need to install Git for Windows.\nGo to this link - https://github.com/git-for-windows/git/releases/latest - to download the latest version of git. Make sure to select the version compatible with your Windows machine (64-bit or 32-bit).\nOnce you have downloaded the .exe file, double-click it and then follow all install prompts. Choose all recommended options.\n\n\n\n\nStep 1: Download and install R\nImportant that R is installed first. R is the main software and is needed for RStudio to work properly. R should always be installed first.\nGo to https://cran.r-project.org and click on the link that says Download R for macOS. In the following page, you will have two choices of R versions to install. Make sure to install the appropriate version for your macOS version (Apple Silicon vs Apple Intel version). Click on the download link for your macOS version. This will start the download process of the .pkg file specific for installing in macOS computers.\nOnce downloaded, go to the .pkg file in your Downloads folder, double-click and follow all the install prompts, selecting recommended options all the time.\n\n\n1.1.1 Install RStudio\nThis step requires that Step 1 has been done and was successful.\nGo to https://posit.co/download/rstudio-desktop/ and select the download specific for your macOS machine.\nOnce downloaded, double-click on .dmg file downloaded to your Downloads folder and then follow all install prompts, always selecting recommended options.\n\n\n1.1.2 Install git for macOS\nFor the things that you will be taught in the Open and Reproducibile Science sub-module, you we will need to install git for macOS. Apple machines are already pre-installed with git but it is usually an Apple specific version of git and tends to be older and not configured in the way we need it. So we need to install another version of it that comes with Apple’s Xcode command line tools.\nTo install, go to the macOS terminal and type the following command:\nxcode-select --install",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and setting up tools</span>"
    ]
  },
  {
    "objectID": "installing-software.html#sec-github-account",
    "href": "installing-software.html#sec-github-account",
    "title": "1  Installing and setting up tools",
    "section": "1.2 Register a GitHub account",
    "text": "1.2 Register a GitHub account\nFor the Open and Reproducible Science in R sub-module, you will need a GitHub account to be able to receive the code materials and assignments that will be provided. This is the mechanism by which these materials will be distributed. Hence you will need to register an account with GitHub (if you don’t already have one). It’s free!\n\nStep 1. Sign-up to GitHub\nGo to https://github.com.\nOn the upper right hand corner of the page, click on Sign-up button\n\nYou will be then prompted to provide an email address to register your account with.\n\n\n\n\n\n\n\nNote\n\n\n\nWith regard to the email address to use for creating a GitHub account, best practice is to use an email address that you will have access to all the time. Email addresses such as those for school (if you are a student) or for your current work may not always be the best email address to use as these email addresses tend to be time-limited (i.e., you lose the email address once you graduate or once you leave your current work).\n\n\nYou will then be prompted for a password\n\nThen follow all other prompts after this including confirmation of your email and creating a GitHub username (see next step).\n\n\nStep 2. Set a GitHub username\nWith regard to creating/selecting a GitHub username, following are some best practice recommendations (Jenny Bryan and Jim Hester n.d.).\n\n\n\n\n\n\nTips for selecting GitHub username\n\n\n\n\nIncorporate your actual name as this lets people know who they’re dealing with and also makes your username easier for people to guess or remember.\nReuse your username from other contexts, e.g., Twitter or Slack.\nPick a username that will be appropriate revealing to a future boss.\nShorter is better than longer.\nBe as unique as possible in as few characters as possible.\nMake it timeless and context-agnostic. Don’t add a date or year or a reference to your current location, university, or employer.\nAvoid the use of upper vs. lower case to separate words. We highly recommend all lowercase. A better strategy for word separation is to use a hyphen (-).\n\n\n\n\n\nStep 3. Setup two-factor authentication (2FA)\nIt is important to keep your GitHub account secure. Any breach in security of your online accounts, including GitHub, not only affects you but also those that you collaborate with. To increase the security of your GitHub account, please enable two-factor authentication (2FA) for your account. This can be done here. There are 4 options for 2FA in GitHub. We recommended enabling at least 2 of these options. If you are familiar with use of passkeys, we recommend using this authentication approach in addition to 2FA.\n\n\nStep 4. Get added to the Oxford IHTM CodeHub\nThe Oxford iHealth CodeHub is the organisational GitHub account for the MSc IHTM. To be included in the organisation, share your GitHub username to the sub-module lead who will then add you to the organisation. This is an important step as assignments and exercises for the sub-module are distributed through GitHub and GitHub Classroom via this organisational account.\n\n\n\n\n\n\nImportant\n\n\n\nThe Oxford iHealth CodeHub organisational GitHub account requires members to have 2FA activated. It is therefore imperative that you enable 2FA on your account to be included in the organisation.\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou will soon receive a message at the email address you registered to GitHub with inviting you to join the Oxford iHealth CodeHub organisation. Accept the invitation.\n\n\n\n\n\n\nJenny Bryan, and Jim Hester. n.d. Happy Git and GitHub for the useR. Accessed September 3, 2024. https://happygitwithr.com/.",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing and setting up tools</span>"
    ]
  },
  {
    "objectID": "introduction-to-r.html",
    "href": "introduction-to-r.html",
    "title": "2  Introduction to R and RStudio",
    "section": "",
    "text": "2.1 What is R?\nR is a system for data manipulation, calculation, and graphics. It provides:\nR is often described as an environment for working with data. This is in contrast to a statistical package which is a collection of very specific tools. R is not strictly a statistics system but a system that provides many classical and modern statistical procedures as part of a broader data-analysis tool. This is an important difference between R and other statistical systems. In R a statistical analysis is usually performed as a series of steps with intermediate results being stored in objects. Systems such as SPSS and SAS provide copious output from (e.g.) a regression analysis whereas R will give minimal output and store the results of a fit for subsequent interrogation or use with other R functions. This means that R can be tailored to produce exactly the analysis and results that you want rather than produce an analysis designed to fit all situations.\nR is a language based product. This means that you interact with R by typing commands such as:\ntable(SEX, LIFE)\nrather than by using menus, dialog boxes, selection lists, and buttons. This may seem to be a drawback but it means that the system is considerably more flexible than one that relies on menus, buttons, and boxes. It also means that every stage of your data management and analysis can be recorded and edited and re-run at a later date. It also provides an audit trail for quality control purposes.\nR is available under UNIX (including Linux), the Apple operating system macOS, and Microsoft Windows. The method used for starting R will vary from system to system. On UNIX systems you may need to issue the R command in a terminal session or click on an icon or menu option if your system has a windowing system. On Apple systems R will be available as an application but can also be run in a terminal session. On Microsoft Windows systems there will usually be an icon on the Start menu or the desktop.",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "introduction-to-r.html#sec-what-r",
    "href": "introduction-to-r.html#sec-what-r",
    "title": "2  Introduction to R and RStudio",
    "section": "",
    "text": "Facilities for data handling and storage\nA large collection of tools for data analysis\nGraphical facilities for data analysis and display\nA simple but powerful programming language",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "introduction-to-r.html#sec-why-r",
    "href": "introduction-to-r.html#sec-why-r",
    "title": "2  Introduction to R and RStudio",
    "section": "2.2 Why use R?",
    "text": "2.2 Why use R?\nR is an open source system and is available under the GNU general public license (GPL) which means that it is available for free but that there are some restrictions on how you are allowed to distribute the system and how you may charge for bespoke data analysis solutions written using the R system. Details of the general public license are available from http://www.gnu.org/copyleft/gpl.html.\nR is available for download from http://www.r-project.org/.\nThis is also the best place to get extension packages and documentation. You may also subscribe to the R mailing lists from this site. R is supported through mailing lists. The level of support is at least as good as for commercial packages. It is typical to have queries answered in a matter of a few hours.\nEven though R is a free package it is more powerful than most commercial packages. Many of the modern procedures found in commercial packages were first developed and tested using R or S-Plus (the commercial equivalent of R).",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "introduction-to-r.html#sec-what-rstudio",
    "href": "introduction-to-r.html#sec-what-rstudio",
    "title": "2  Introduction to R and RStudio",
    "section": "2.3 What is RStudio",
    "text": "2.3 What is RStudio\nRStudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management.\nRStudio is available in open source and commercial editions and runs on the desktop (Windows, macOS, and Linux) or in a browser connected to RStudio Server or RStudio Workbench (Debian/Ubuntu, Red Hat/CentOS, and SUSE Linux).",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "introduction-to-git.html",
    "href": "introduction-to-git.html",
    "title": "3  Introduction to git and GitHub",
    "section": "",
    "text": "3.1 All about git\ngit is a version control system for software development. It allows developers to keep track of changes made to their code and collaborate with other developers on a project. git also allows for easy rollbacks and branch management. It is widely used in the software industry and is considered one of the best version control systems available.\ngit was developed by Linus Torvalds in 2005. He created git as a replacement for the proprietary version control system he was using at the time. The development of git was driven by the need for a distributed version control system, which allows multiple developers to work on a project simultaneously, without the need for a central server. Linus Torvalds is also known for creating the Linux operating system kernel.\nTo use git in your machines, you will need to install it as described in Section 1.1.",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to git and GitHub</span>"
    ]
  },
  {
    "objectID": "introduction-to-git.html#sec-all-about-github",
    "href": "introduction-to-git.html#sec-all-about-github",
    "title": "3  Introduction to git and GitHub",
    "section": "3.2 All about GitHub",
    "text": "3.2 All about GitHub\nGitHub is a web-based platform that provides hosting for software development and a community of developers to collaborate, share and learn from each other. It is built on top of git, which is the version control system used for managing and tracking changes to the code. Developers can use GitHub to store and manage their code, collaborate with other developers, and track and manage issues and bugs. It also provides tools for code review, project management, and documentation. It is widely used by developers and organizations to host and share code, as well as to build and maintain open-source software.\nGitHub is not a software you need to install. Rather it is a remote or cloud-based server that holds its users’ code versioned using the git version control system and to which a user’s local, git-versioned code syncs/communicates with.\nA good illustration of the git and GitHub relationship can be viewed below:",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to git and GitHub</span>"
    ]
  },
  {
    "objectID": "connecting-git-with-rstudio.html",
    "href": "connecting-git-with-rstudio.html",
    "title": "4  Connecting RStudio with GitHub",
    "section": "",
    "text": "4.1 Introduce yourself to git\nOpen RStudio and then select the Terminal tab in the console pane.\nThe terminal is the tool used to interface with your computer through commands written in a programming language called bash. Most of you would have never used the terminal because we mostly use software built-in our computers that provide a graphical user interface (GUI) to perform operations and tasks.\nRStudio comes with the terminal tool built in and usually is already available from the console pane as a separate table along side the R console (see below). By default, whenever you open RStudio, this tab for the terminal tool should already be available.\nIf if is not present, you can easily open a new terminal tab in the console pane by going to the RStudio menu ribbon and clicking on:\nor you can use the ALT + SHIFT + R keyboard shortcut.\nIn this step, you are basically going to issue a set of commands to your computer to save and store specific settings for the git software that you have installed.\nSpecifically, you are going to let git know who you are (your name) and what your email address (associated with your GitHub account) is.\nThe commands will be issued on the terminal. The commands are:\nMake sure to supply your full proper name (and not your username you created in GitHub).\nMake sure that the email you provide is the email address you used to register and create an account with GitHub.\nUnless there was an error in your syntax, you should not expect any output on the terminal after you issue the commands. To check that your name and email address have been recorded and/or that the name and email address recorded is correct, you can issue the following command:\nHere is an example of what you will see after issue this command:\nCheck this output to what you expect it to be specified as. If the information is correct, then you’ve completed this step. If you need to correct any of this information, then repeat this step making sure that the name and email address you provide is correct.",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Connecting RStudio with GitHub</span>"
    ]
  },
  {
    "objectID": "connecting-git-with-rstudio.html#introduce-to-git",
    "href": "connecting-git-with-rstudio.html#introduce-to-git",
    "title": "4  Connecting RStudio with GitHub",
    "section": "",
    "text": "Tools --&gt; Terminal --&gt; New Terminal\n\n\n\n\ngit config --global user.name 'YOUR FULL NAME'\ngit config --global user.email 'YOUR EMAIL ADDRESS'\n\n\n\ngit config --global --list\n\nuser.name=YOUR FULL NAME\nuser.email=YOUR EMAIL ADDRESS",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Connecting RStudio with GitHub</span>"
    ]
  },
  {
    "objectID": "connecting-git-with-rstudio.html#create-a-github-personal-access-token-pat",
    "href": "connecting-git-with-rstudio.html#create-a-github-personal-access-token-pat",
    "title": "4  Connecting RStudio with GitHub",
    "section": "4.2 Create a GitHub personal access token (PAT)",
    "text": "4.2 Create a GitHub personal access token (PAT)\nNow that you have introduced yourself to the git that is installed in your local machine/computer, you should now visit GitHub on a browser and create a personal access token (PAT).\nWhen you communicate/sync/interact with a remote git server, such as GitHub, you have to include credentials in the communication you are sending. These credentials prove that you are a specific GitHub user, who’s allowed to do whatever you’re asking to do.\ngit can communicate with a remote server using one of two protocols, HTTPS or SSH, and the different protocols use different credentials.\nHere we describe the credential setup for the HTTPS protocol, which is what we recommend if you have no burning reason to pick SSH. With HTTPS, we will use a PAT to connect securely to GitHub from RStudio.\nPlease note that the PAT is not the same as the password you provided when registering for your GitHub account. Also, in performing a connection to GitHub via HTTPS protocol, your password is not an acceptable credential for communicating with GitHub.\nTo create a GitHub PAT, you need to:\n\nStep 1: Go to Settings from your GitHub account menu\nLogin to your GitHub account. On the upper right hand corner of the GitHub page you will see your account icon. Click on it to reveal a drop down menu as shown below. Select the Settings option.\n\n\n\nStep 2: From Settings navigate to Developer Settings\nIn the Settings page, find the Developer Settings option on the left hand sidebar as shown below:\n\n\n\nStep 3: From Developer Settings navigate to Personal Access Token\nIn the Developer Settings page, find the Personal Access Token option on the left hand sidebar as shown below:\n\n\n\nStep 4: Select Tokens (classic)\n\n\n\nStep 5: Click on Generate new token\n\n\n\nStep 6: Select Generate new token (classic)\n\n\n\nStep 7: Give your token a name\n\nThe token name should be short but descriptive of the where or how you will use the token. Since we are using this to connect and allow communication between RStudio and GitHub, rstudio can be a good name that would remind you that this is what you are using to secure the connection/communication between your RStudio and your GitHub account.\n\n\nStep 8: Set an expiry date for the token\n\nBy default, GitHub will set a 30 day validity for any new token created. Clicking on the option menu will show the other possible time periods to choose from including No expiry date.\nIt is best practice to assign an expiry date for security tokens such as the GitHub PAT. And a 30 day validity is standard practice. However, in reality, it is cumbersome to be creating new tokens frequently and for beginners, having to go through these steps again can be quite a chore. For the purposes of this lecture series, we would recommend setting the expiry for about 90 days to cover the whole period and then as a group, we’ll have a renew GitHub PAT party on our last session.\n\n\nStep 9: Set scopes\n\nScopes are the types of permissions that you are attaching the token you are generating. This is again a security feature as takens should only be given specific and limited permissions based on what you intend the token to be used for. It is not good practice to give a token complete or unlimited permissions as you are exposing your account to high risk if and when your token gets compromised.\nFor general R users, the following scopes are currently recommended:\n\nrepo\nworkflow\ngist\nuser\n\n\n\nStep 10: Click on Generate token\n\nAfter clicking you will now see a long string of characters and numbers which is your GitHub PAT. It is important to remember that once you see the generated GitHub PAT, you should copy this right away and store it securely.\n\n\nStep 11: Store your PAT\nTreat your GitHub PAT in the same way you would treat your password for online accounts. The best way to securely store the GitHub PAT is using a password manager (1Password, LastPass, Bitwarden). If you have a macOS computer, you can save your GitHub PAT into your computer’s keychain.\n\n\n\n\n\n\nWarning\n\n\n\nNon-secure password/token storage practices that has been done by other students before are:\n\nEmail their password/token to themselves\n\nIf you are using free email services such as Gmail, then this is a highly non-secure method. Others use their University of Oxford email address and argue that this is secure compared to using the free email services. Whilst it is true that a university email account is more secure, email communications and email storage is still one of the most vulnerable places to keep something that is meant to be kept secret.\n\nPaste the token into a Word document and save in personal computer with the filename GITHUB_PAT.docx\nPaste the token into a Word document and save in Dropbox or in Google Drive\n\nPlease AVOID these methods.",
    "crumbs": [
      "Tools",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Connecting RStudio with GitHub</span>"
    ]
  },
  {
    "objectID": "writing-functions.html",
    "href": "writing-functions.html",
    "title": "5  Writing functions",
    "section": "",
    "text": "For this topic, we will use data on weight and height to calculate body mass index. As a refresher, body mass index is calculated as follows:\n\\[ \\text{Body mass index} ~=~ \\frac{weight ~ (kgs)}{height ~ (m) ^ 2} \\]\nFor this topic on writing functions in R, we will use BMI as an example to explore and demonstrate how we can create our own functions in R.\nLet’s say for example that you have been doing a research on children aged 11 years and older in 3 schools and you have collected the following data:\nSchool 1516\n\nschool1516\n\n    school sex ageMonths weight height\n427   1516   1       138   24.5  126.0\n428   1516   1       150   28.3  136.3\n429   1516   1       162   32.2  143.5\n430   1516   1       162   32.7  143.5\n431   1516   1       150   28.6  137.0\n432   1516   2       138   26.5  134.0\n433   1516   1       150   29.9  139.2\n434   1516   1       150   30.0  139.5\n435   1516   1       162   34.0  148.0\n436   1516   1       138   25.4  135.7\n437   1516   1       150   32.3  143.0\n438   1516   2       174   38.3  153.5\n439   1516   2       162   41.6  151.0\n440   1516   1       150   30.7  145.0\n441   1516   2       186   46.8  155.2\n442   1516   1       186   46.6  163.4\n443   1516   1       150   33.5  145.5\n444   1516   1       186   47.0  164.0\n445   1516   1       174   41.1  159.5\n446   1516   2       162   39.1  152.2\n447   1516   2       174   40.9  155.5\n448   1516   2       162   39.7  153.0\n449   1516   2       162   40.9  153.2\n450   1516   1       150   34.2  147.5\n451   1516   2       150   41.8  149.4\n452   1516   1       138   28.0  141.5\n453   1516   1       138   30.0  142.0\n454   1516   1       138   33.1  142.0\n455   1516   1       186   46.1  167.5\n456   1516   1       150   36.2  149.0\n457   1516   2       162   47.4  156.0\n458   1516   1       150   30.3  150.2\n459   1516   2       150   36.4  152.1\n460   1516   2       150   36.4  155.0\n461   1516   2       150   44.1  155.0\n462   1516   2       162   42.3  160.1\n463   1516   2       179   50.4  163.5\n464   1516   1       150   37.6  155.0\n465   1516   2       138   36.0  154.5\n466   1516   2       138   46.1  156.0\n\n\nSchool 1522\n\nschool1522\n\n    school sex ageMonths weight height\n646   1522   1       203   30.6  140.5\n647   1522   1       174   30.8  140.0\n648   1522   1       162   29.3  136.3\n649   1522   1       150   24.0  132.0\n650   1522   1       150   28.1  132.1\n651   1522   2       150   27.2  134.9\n652   1522   1       162   34.2  139.2\n653   1522   1       150   25.5  134.2\n654   1522   1       138   24.6  129.0\n655   1522   1       174   36.4  147.5\n656   1522   1       150   28.7  137.5\n657   1522   1       186   45.8  155.6\n658   1522   1       174   36.3  151.6\n659   1522   1       150   31.0  139.5\n660   1522   1       138   29.0  134.3\n661   1522   1       179   38.3  155.5\n662   1522   2       138   31.3  138.4\n663   1522   1       162   36.5  148.8\n664   1522   1       155   36.8  145.2\n665   1522   1       138   28.3  136.8\n666   1522   1       138   26.8  137.3\n667   1522   2       138   32.6  141.4\n668   1522   2       138   31.9  143.0\n669   1522   1       174   42.6  160.7\n670   1522   2       198   57.8  158.0\n671   1522   2       162   43.9  153.5\n672   1522   2       150   35.1  150.6\n673   1522   2       186   52.6  159.6\n674   1522   2       150   45.1  152.8\n675   1522   2       138   34.6  147.2\n676   1522   2       150   45.3  153.1\n677   1522   1       186   51.8  170.2\n678   1522   2       150   57.1  154.2\n679   1522   2       138   33.5  149.2\n680   1522   1       150   36.3  154.1\n681   1522   1       174   44.0  169.1\n682   1522   2       150   44.5  158.3\n683   1522   2       150   51.5  159.1\n684   1522   2       138   47.4  157.8\n685   1522   2       138   36.8  158.5\n686   1522   2       138   52.0  161.0\n\n\nSchool 1525\n\nschool1525\n\n    school sex ageMonths weight height\n752   1525   1       186   26.2    137\n753   1525   1       186   32.7    138\n754   1525   1       150   25.9    130\n755   1525   1       162   30.4    137\n756   1525   2       138   24.4    129\n757   1525   2       138   23.8    130\n758   1525   1       150   26.1    133\n759   1525   1       150   26.4    135\n760   1525   1       174   35.1    148\n761   1525   1       162   28.7    142\n762   1525   1       150   28.0    136\n763   1525   1       174   34.0    149\n764   1525   1       186   40.6    155\n765   1525   2       150   35.8    142\n766   1525   1       150   35.4    140\n767   1525   2       138   27.8    137\n768   1525   2       138   28.2    137\n769   1525   2       138   29.7    139\n770   1525   2       138   30.9    139\n771   1525   1       138   28.2    137\n772   1525   2       138   26.2    140\n773   1525   2       138   26.6    140\n774   1525   1       138   27.2    138\n775   1525   2       138   27.0    141\n776   1525   1       150   31.3    145\n777   1525   2       162   33.9    152\n778   1525   2       162   42.0    153\n779   1525   2       185   38.3    157\n780   1525   2       138   31.0    145\n781   1525   2       138   32.3    145\n782   1525   1       139   35.1    144\n783   1525   2       150   36.4    152\n784   1525   2       138   32.7    147\n785   1525   1       174   44.9    166\n786   1525   2       138   32.2    148\n787   1525   2       138   36.4    148\n788   1525   1       138   31.4    146\n789   1525   2       138   45.0    149\n790   1525   2       162   49.4    160\n791   1525   2       138   34.3    150\n792   1525   1       138   30.0    148\n793   1525   2       150   37.0    156\n794   1525   2       162   52.2    165\n795   1525   2       138   42.9    158\n\n\nIn this dataset, the units of the height measurement is in centimetres.\nUsing what we have learned earlier on calculating BMI using R, I can perform the following R commands to get the BMI for each child in each of the schools:\n\n## Calculate BMI for children in school 1516\nschool1516$weight / (school1516$height / 100) ^ 2\n\n## Calculate BMI for children in school 1516\nschool1522$weight / (school1516$height / 100) ^ 2\n\n## Calculate BMI for children in school 1516\nschool1525$weight / (school1516$height / 100) ^ 2\n\nBecause the commands are repetitive, I can easily copy and paste my initial line of code to calculate BMI for children in school 1516 and then just change the object names accordingly to calculate the BMI for children in the two other schools.\nWhen I run these lines of code, I get the following results:\n\n\n [1] 15.43210 15.23333 15.63695 15.87976 15.23789 14.75830 15.43095 15.41604\n [9] 15.52228 13.79349 15.79539 16.25481 18.24481 14.60166 19.42954 17.45347\n[17] 15.82409 17.47472 16.15550 16.87903 16.91463 16.95929 17.42632 15.71962\n[25] 18.72730 13.98444 14.87800 16.41539 16.43128 16.30557 19.47732 13.43083\n[33] 15.73414 15.15088 18.35588 16.50280 18.85363 15.65036 15.08153 18.94313\n\n\nWarning in school1522$weight/(school1516$height/100)^2: longer object length is\nnot a multiple of shorter object length\n\n\n [1] 19.27438 16.57903 14.22865 11.65487 14.97150 15.14814 17.65012 13.10363\n [9] 11.23083 19.76704 14.03492 19.43787 15.92035 14.74435 12.03967 14.34481\n[17] 14.78490 13.57079 14.46527 12.21679 11.08343 13.92627 13.59168 19.58058\n[25] 25.89564 21.92561 17.40726 26.08609 16.07485 15.58488 18.61440 22.96095\n[33] 24.68185 13.94381 15.10926 17.16604 16.64656 21.43600 19.85735 15.12163\n[41] 32.75384\n\n\nWarning in school1525$weight/(school1516$height/100)^2: longer object length is\nnot a multiple of shorter object length\n\n\n [1] 16.50290 17.60176 12.57755 14.76284 13.00016 13.25462 13.46983 13.56612\n [9] 16.02447 15.58555 13.69260 14.42986 17.80624 17.02735 14.69670 10.41216\n[17] 13.32058 11.04253 12.14611 12.17362 10.83529 11.36315 11.58914 12.41023\n[25] 14.02307 16.93116 20.82920 18.99425 11.04923 14.54889 14.42308 16.13472\n[33] 14.13479 18.68887 13.40271 14.20099 11.74611 18.73049 20.69522 14.09435\n[41] 18.89645 19.91636 25.34934 20.83308\n\n\nThe calculation for the BMI of children in school 1516 seems to have completed without issues and a vector of BMI results have been produced. However, for school 1522 and school 1525, there is a warning saying:\n## Warning in school1522$weight/(school1516$height)^2: longer object length is not a multiple\n## of shorter object length\nAlthough a result has been provided, the warning gives me an indication that someting is not quite right with my calculation and when I inspect further, I notice that in my formula for school 1522 and for school 1525, my denominator is still using data for school 1516 and this is most likely what is causing the warning message.\nSo, to correct this I go back to my lines of code and edit the denominators for school 1522 and school 1525 as follows:\n\n## Calculate BMI for children in school 1516\nschool1516$weight / (school1516$height / 100) ^ 2\n\n## Calculate BMI for children in school 1516\nschool1522$weight / (school1522$height / 100) ^ 2\n\n## Calculate BMI for children in school 1516\nschool1525$weight / (school1525$height / 100) ^ 2\n\nwhich gives me:\n\n\n [1] 15.43210 15.23333 15.63695 15.87976 15.23789 14.75830 15.43095 15.41604\n [9] 15.52228 13.79349 15.79539 16.25481 18.24481 14.60166 19.42954 17.45347\n[17] 15.82409 17.47472 16.15550 16.87903 16.91463 16.95929 17.42632 15.71962\n[25] 18.72730 13.98444 14.87800 16.41539 16.43128 16.30557 19.47732 13.43083\n[33] 15.73414 15.15088 18.35588 16.50280 18.85363 15.65036 15.08153 18.94313\n\n\n [1] 15.50132 15.71429 15.77161 13.77410 16.10277 14.94669 17.65012 14.15908\n [9] 14.78277 16.73082 15.18017 18.91674 15.79459 15.92991 16.07852 15.83937\n[17] 16.34076 16.48493 17.45479 15.12217 14.21653 16.30492 15.59978 16.49597\n[25] 23.15334 18.63150 15.47594 20.65000 19.31656 15.96837 19.32626 17.88178\n[33] 24.01416 15.04898 15.28626 15.38741 17.75817 20.34543 19.03550 14.64837\n[41] 20.06095\n\n\n [1] 13.95919 17.17076 15.32544 16.19692 14.66258 14.08284 14.75493 14.48560\n [9] 16.02447 14.23329 15.13841 15.31463 16.89906 17.75441 18.06122 14.81166\n[17] 15.02477 15.37188 15.99296 15.02477 13.36735 13.57143 14.28271 13.58081\n[25] 14.88704 14.67278 17.94182 15.53816 14.74435 15.36266 16.92708 15.75485\n[33] 15.13258 16.29409 14.70051 16.61797 14.73072 20.26936 19.29687 15.24444\n[41] 13.69613 15.20381 19.17355 17.18475\n\n\nI now do not get the warning message and the expected length of BMI values for each school has now been produced.\nFrom this short example above, we realise how tedious a task it is to type in the code above every time we need to calculate BMI. Also, it becomes even challenging to debug issues with the code because we have to review and edit (as needed) each iteration of the calculation to see where it may have gone wrong (especially when doing a cut and paste approach).\nIt would be better (and easier) to have a function that calculates and displays the BMI values automatically. Fortunately, R allows us to do just that.\nThe function() function allows us to create new functions in R with the following generic syntax:\n\nfunction_name &lt;- function(argument1, argument2, ...) {\n  ## Your code here\n}\n\nUsing this template/generic syntax, we apply it to create a function called calculate_bmi as follows:\n\ncalculate_bmi &lt;- function(weight, height) {\n  weight / height ^ 2\n}\n\nWe now have a function for calculating and outputing BMI values.\nLet us now test it with our 3 sets of data:\nSchool 1516\n\ncalculate_bmi(\n  weight = school1516$weight,\n  height = school1516$height / 100\n)\n\n [1] 15.43210 15.23333 15.63695 15.87976 15.23789 14.75830 15.43095 15.41604\n [9] 15.52228 13.79349 15.79539 16.25481 18.24481 14.60166 19.42954 17.45347\n[17] 15.82409 17.47472 16.15550 16.87903 16.91463 16.95929 17.42632 15.71962\n[25] 18.72730 13.98444 14.87800 16.41539 16.43128 16.30557 19.47732 13.43083\n[33] 15.73414 15.15088 18.35588 16.50280 18.85363 15.65036 15.08153 18.94313\n\n\nSchool 1522\n\ncalculate_bmi(\n  weight = school1522$weight,\n  height = school1522$height / 100\n)\n\n [1] 15.50132 15.71429 15.77161 13.77410 16.10277 14.94669 17.65012 14.15908\n [9] 14.78277 16.73082 15.18017 18.91674 15.79459 15.92991 16.07852 15.83937\n[17] 16.34076 16.48493 17.45479 15.12217 14.21653 16.30492 15.59978 16.49597\n[25] 23.15334 18.63150 15.47594 20.65000 19.31656 15.96837 19.32626 17.88178\n[33] 24.01416 15.04898 15.28626 15.38741 17.75817 20.34543 19.03550 14.64837\n[41] 20.06095\n\n\nSchool 1525\n\ncalculate_bmi(\n  weight = school1525$weight,\n  height = school1525$height / 100\n)\n\n [1] 13.95919 17.17076 15.32544 16.19692 14.66258 14.08284 14.75493 14.48560\n [9] 16.02447 14.23329 15.13841 15.31463 16.89906 17.75441 18.06122 14.81166\n[17] 15.02477 15.37188 15.99296 15.02477 13.36735 13.57143 14.28271 13.58081\n[25] 14.88704 14.67278 17.94182 15.53816 14.74435 15.36266 16.92708 15.75485\n[33] 15.13258 16.29409 14.70051 16.61797 14.73072 20.26936 19.29687 15.24444\n[41] 13.69613 15.20381 19.17355 17.18475\n\n\nIn our example here, the calculate_bmi() function helped a little bit in making the code to calculate BMI for each student in each school more efficient. But the efficiency that functions provide become more evident when you need to make more complex operations. For example, what if you need to get the mean BMI for students in each school? Without a function, we will have to do the following script for each school:\nSchool 1516\n\n## Calculate BMI for children in school 1516\nbmi_school1516 &lt;- school1516$weight / (school1516$height / 100) ^ 2\n\n## Get the mean BMI for children in school 1516\nmean_bmi_school1516 &lt;- mean(bmi_school1516)\n\nmean_bmi_school1516\n\n[1] 16.28491\n\n\nSchool 1522\n\n## Calculate BMI for children in school 1522\nbmi_school1522 &lt;- school1522$weight / (school1522$height / 100) ^ 2\n\n## Get the mean BMI for children in school 1522\nmean_bmi_school1522 &lt;- mean(bmi_school1522)\n\nmean_bmi_school1522\n\n[1] 16.89955\n\n\nSchool 1525\n\n## Calculate BMI for children in school 1525\nbmi_school1525 &lt;- school1525$weight / (school1525$height) ^ 2\n\n## Get the mean BMI for children in school 1525\nmean_bmi_school1525 &lt;- mean(bmi_school1525)\n\nmean_bmi_school1525\n\n[1] 0.001564695\n\n\nAs the operations/calculations we want to perform become more complex, the copy and paste method becomes more and more tedious. With the function approach, we can use the following:\n\ncalculate_mean_bmi &lt;- function(weight, height) {\n  bmi &lt;- weight / height ^ 2\n  \n  mean_bmi &lt;- mean(bmi)\n  \n  return(mean_bmi)\n}\n\nApplying the function to the datasets, we get:\nSchool 1516\n\ncalculate_mean_bmi(\n  weight = school1516$weight,\n  height = school1516$height / 100\n)\n\n[1] 16.28491\n\n\nSchool 1522\n\ncalculate_mean_bmi(\n  weight = school1522$weight,\n  height = school1522$height / 100\n)\n\n[1] 16.89955\n\n\nSchool 1525\n\ncalculate_mean_bmi(\n  weight = school1525$weight,\n  height = school1525$height / 100\n)\n\n[1] 15.64695",
    "crumbs": [
      "Practices",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Writing functions</span>"
    ]
  },
  {
    "objectID": "clone-repository-rstudio.html",
    "href": "clone-repository-rstudio.html",
    "title": "6  Cloning a GitHub repository into your local computer using RStudio",
    "section": "",
    "text": "6.1 Get the GitHub repository URL",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cloning a GitHub repository into your local computer using RStudio</span>"
    ]
  },
  {
    "objectID": "clone-repository-rstudio.html#get-the-github-repository-url",
    "href": "clone-repository-rstudio.html#get-the-github-repository-url",
    "title": "6  Cloning a GitHub repository into your local computer using RStudio",
    "section": "",
    "text": "1. Go to the repository’s GitHub page\nClick on the green button that is labeled code.\n\n\n2. Copy the repository URL\nClick on the copy to clipboard icon to copy the repository URL.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cloning a GitHub repository into your local computer using RStudio</span>"
    ]
  },
  {
    "objectID": "clone-repository-rstudio.html#go-to-rstudio-and-create-new-project",
    "href": "clone-repository-rstudio.html#go-to-rstudio-and-create-new-project",
    "title": "6  Cloning a GitHub repository into your local computer using RStudio",
    "section": "6.2 Go to RStudio and create new project",
    "text": "6.2 Go to RStudio and create new project",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cloning a GitHub repository into your local computer using RStudio</span>"
    ]
  },
  {
    "objectID": "clone-repository-rstudio.html#choose-version-control",
    "href": "clone-repository-rstudio.html#choose-version-control",
    "title": "6  Cloning a GitHub repository into your local computer using RStudio",
    "section": "6.3 Choose Version Control",
    "text": "6.3 Choose Version Control",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cloning a GitHub repository into your local computer using RStudio</span>"
    ]
  },
  {
    "objectID": "clone-repository-rstudio.html#select-git",
    "href": "clone-repository-rstudio.html#select-git",
    "title": "6  Cloning a GitHub repository into your local computer using RStudio",
    "section": "6.4 Select Git",
    "text": "6.4 Select Git",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cloning a GitHub repository into your local computer using RStudio</span>"
    ]
  },
  {
    "objectID": "clone-repository-rstudio.html#setup-repository-settings",
    "href": "clone-repository-rstudio.html#setup-repository-settings",
    "title": "6  Cloning a GitHub repository into your local computer using RStudio",
    "section": "6.5 Setup repository settings",
    "text": "6.5 Setup repository settings\n\n\n1. Paste the repository URL you copied earlier\n\n\n2. Set the project directory name\nThe project directory name should be specified already after you paste the repository URL. Use the suggested directory name.\n\n\n3. Set local directory\nBrowse for the directory on your local computer where you want to save the files for the specified project.\n\n\n4. Create project\nClick on the Create Project button/icon.\nYou will now have the GitHub repository in your local computer.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cloning a GitHub repository into your local computer using RStudio</span>"
    ]
  },
  {
    "objectID": "commit-and-push.html",
    "href": "commit-and-push.html",
    "title": "7  Committing your changes and pushing them to GitHub",
    "section": "",
    "text": "7.1 Click on Commit in the Git tab on RStudio",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Committing your changes and pushing them to GitHub</span>"
    ]
  },
  {
    "objectID": "commit-and-push.html#getting-changes-saved-and-push-to-github",
    "href": "commit-and-push.html#getting-changes-saved-and-push-to-github",
    "title": "7  Committing your changes and pushing them to GitHub",
    "section": "7.2 Getting changes saved and push to GitHub",
    "text": "7.2 Getting changes saved and push to GitHub\n\n\n1. Stage changes\nTick the box beside the file that has changed to stage the changes.\n\n\n2. Add a commit message\nEvery time you make a commit you must also write a short commit message.\nWrite a commit message in the Commit message dialog box. In the commit message, describe the changes that you made.\n\n\n3. Click on the Commit button\n\n\n4. Click on the Push button",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Committing your changes and pushing them to GitHub</span>"
    ]
  },
  {
    "objectID": "commit-and-push.html#initiate-a-pull-request",
    "href": "commit-and-push.html#initiate-a-pull-request",
    "title": "7  Committing your changes and pushing them to GitHub",
    "section": "7.3 Initiate a pull request",
    "text": "7.3 Initiate a pull request\n\n1. Click on the branches link from your repository\n\n\n\n2. Make a pull request\nClick on the Make pull request link on the appropriate branch.\n\n\n\n3. Enter a title for your pull request\n\nMake the title as short but as informative as possible.\n\n\n4. Create a pull request\nAdd further description about the pull request (optional) and then click on Create pull request button\n\n\n\n\n\n\n\nNote\n\n\n\nIf you think more information will help the reviewer navigate through the changes you have made, use the comment box to add more details. This comments box can interpret Markdown syntax so you can format your text accordingly.\nOn the right hand side of the pull request page, you can set a specific reviewer for your pull request (recommended). Also, given that you are making this pull request, assign this pull request to you so you are notified of the progress of this pull request.\n\n\n\n\n5. Wait for review\nIf the project has automated checks included, you will see that these checks will get initiated.\n\nIf there are no issues with the code, the automated checks should show that all checks have passed.\n\n\n\n\n\n\n\nNote\n\n\n\nWait for reviewer’s feedback/comments. If reviewer request’s changes, make changes to your code and then commit and push again (as above). If your project has automated checks, this will get triggered again within the same pull request. Your reviewer will be notified of the changes you have made and should review your work again. Once reviewer approves changes, you can then merge your work to the main branch.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Committing your changes and pushing them to GitHub</span>"
    ]
  },
  {
    "objectID": "participating-rstudio-project.html",
    "href": "participating-rstudio-project.html",
    "title": "8  Participating in an existing R/RStudio project",
    "section": "",
    "text": "8.1 Clone the project to your local machine\nSteps in cloning a project to your local machine is described in Chapter 6.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Participating in an existing R/RStudio project</span>"
    ]
  },
  {
    "objectID": "participating-rstudio-project.html#create-a-new-branch-from-the-main-branch",
    "href": "participating-rstudio-project.html#create-a-new-branch-from-the-main-branch",
    "title": "8  Participating in an existing R/RStudio project",
    "section": "8.2 Create a new branch from the main branch",
    "text": "8.2 Create a new branch from the main branch\nBefore making any changes to the project, create a new branch as follows:\n\n8.2.1 Click on New Branch\n\n\n\n8.2.2 Name the new branch\n\nName the branch uniquely. The best way to name a branch will be based on how the team/person you are working with prefers to name branches. Some would like the branch name to succinctly describe the type of change that is being made. Some may ask you to name your branch with your username. Some may ask you to name your branch using coded values.\nOnce named, click on Create\nYou will now see the new branch in the list of branches",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Participating in an existing R/RStudio project</span>"
    ]
  },
  {
    "objectID": "participating-rstudio-project.html#code-and-make-changes-to-your-branch",
    "href": "participating-rstudio-project.html#code-and-make-changes-to-your-branch",
    "title": "8  Participating in an existing R/RStudio project",
    "section": "8.3 Code and make changes to your branch",
    "text": "8.3 Code and make changes to your branch\nStart coding and implement the changes you want to make or the changes that your collaborator/s asked you to make.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Participating in an existing R/RStudio project</span>"
    ]
  },
  {
    "objectID": "participating-rstudio-project.html#commit-and-push-your-changes-and-initiate-a-pull-request",
    "href": "participating-rstudio-project.html#commit-and-push-your-changes-and-initiate-a-pull-request",
    "title": "8  Participating in an existing R/RStudio project",
    "section": "8.4 Commit and push your changes and initiate a pull request",
    "text": "8.4 Commit and push your changes and initiate a pull request\nAfter making changes, you should commit and push your changes. This process is described in Chapter 7. Your code and your changes do not have to be complete already for your to commit and push changes. It is good practice to commit and push frequently (at least once a day usually at the end of your coding session). See this as similar to saving your work at multiple stages.\nOnce your code and the changes you want to make are complete (and ideally that they are working correctly on your local machine), and that you are ready to have your work reviewed, you can now make a pull request. This process is also described in Chapter 7.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Participating in an existing R/RStudio project</span>"
    ]
  },
  {
    "objectID": "participating-rstudio-project.html#merge-pull-request",
    "href": "participating-rstudio-project.html#merge-pull-request",
    "title": "8  Participating in an existing R/RStudio project",
    "section": "8.5 Merge pull request",
    "text": "8.5 Merge pull request\nOnce your chosen reviewer has seen your work, they may ask you to make changes based on what they see with your code. If so, then start coding again on the same branch and address the reviewers comments, commit those changes and push the changes to your remote repository. Your changes will push into the same existing open pull request that is waiting approval. The reviewer can then view your changes and make the necessary feedback.\nOnce reviewer approves your changes, they may either merge your pull request themselves or they may let you know in their feedback that they are happy with your changes and that you can now merge your pull request. If so, then click on the Merge pull request button.\nYour changes have now been integrated into the main branch of the project.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Participating in an existing R/RStudio project</span>"
    ]
  },
  {
    "objectID": "initiating-rstudio-project.html",
    "href": "initiating-rstudio-project.html",
    "title": "9  Initiating an R/RStudio project",
    "section": "",
    "text": "9.1 Create a new project in RStudio",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Initiating an R/RStudio project</span>"
    ]
  },
  {
    "objectID": "initiating-rstudio-project.html#sec-create-project",
    "href": "initiating-rstudio-project.html#sec-create-project",
    "title": "9  Initiating an R/RStudio project",
    "section": "",
    "text": "9.1.1 Click on New Project button on RStudio\n\n\n\n\n9.1.2 Create a New Directory\n\n\n\n9.1.3 Select New Project as project type\n\n\n\n9.1.4 Specify details for new project\n\n\nSpecify a project name\n\n\n\n\n\n\nNote\n\n\n\nBest practices for naming a project are:\n\nMake sure that name is succinct (as short as possible while at the same time descriptive of the project);\nDon’t use spaces for your project name. If you need to separate words, use a hyphen or an underscore;\nAvoid using capital letters.\n\n\n\n\n\nSpecify a directory/location\nSelect a directory in your local machine where to place the directory of your new project\n\n\nDecide whether to use git to version this project\nHere you can decide whether you want to use git to version your project. Remember that using git doesn’t mean you have to use GitHub. git is software installed in your local machine and it versions what you have on your local machine. You don’t need GitHub or any other similar service to version your code with git in your local machine.\nI would recommend that you tick this option for any new project you create so that you can version your work in your local machine even if you don’t want or decide not to use GitHub or any other remote git service.\n\n\nDo you want to open a new session\nThis is by default unticked and will open the new project within the existing RStudio session (if any). This means that if you have an existing RStudio session with another project that you are working on, that project will be closed and the new project you are creating will open in the existing RStudio session.\nIf you need your existing RStudio session and the project within it to remain open alongside the new project you are creating, tick this box/option.\n\n\nClick on Create New Project\nOnce you click on Create New Project, you will now see the new project open in RStudio.\nYou will also see something like below witin the file explorer pane of RStudio.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Initiating an R/RStudio project</span>"
    ]
  },
  {
    "objectID": "initiating-rstudio-project.html#structureorganise-your-new-project-appropriately",
    "href": "initiating-rstudio-project.html#structureorganise-your-new-project-appropriately",
    "title": "9  Initiating an R/RStudio project",
    "section": "9.2 2. Structure/organise your new project appropriately",
    "text": "9.2 2. Structure/organise your new project appropriately\n\n\n\n\n\n\nNote\n\n\n\nProject organisation is vital because:\n\nsupports productivity because the different components of the project are placed in directories where they should be;\nenables clarity in communicating project structure;\nfacilitates collaboration.\n\n\n\nOrganising an R project can be user- and project-dependent but there are generally accepted project organising structure that is common to most well-organised projects. Below is an example:\n|-- my-project    \n    |-- data    \n    |-- output    \n        |-- figures    \n    |-- R    \n    |-- my-project.Rproj    \n    |-- analysis_workflow.R    \n    |-- README.md",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Initiating an R/RStudio project</span>"
    ]
  },
  {
    "objectID": "initiating-rstudio-project.html#start-coding",
    "href": "initiating-rstudio-project.html#start-coding",
    "title": "9  Initiating an R/RStudio project",
    "section": "9.3 3. Start coding",
    "text": "9.3 3. Start coding\nThis will include creating bespoke R functions (as required) and creating an Rscript for the step-by-step processes in your scientific workflow.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Initiating an R/RStudio project</span>"
    ]
  },
  {
    "objectID": "initiating-rstudio-project.html#next-steps",
    "href": "initiating-rstudio-project.html#next-steps",
    "title": "9  Initiating an R/RStudio project",
    "section": "9.4 Next steps",
    "text": "9.4 Next steps\nThe next steps will depend on whether you will use git and GitHub for versioning your project and whether or not you will work on your project as a solo scientiest or work and collaborate with other scientists.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Initiating an R/RStudio project</span>"
    ]
  },
  {
    "objectID": "creating-portable-reproducible-workflows.html",
    "href": "creating-portable-reproducible-workflows.html",
    "title": "10  Creating portable and reproducible scientific workflows",
    "section": "",
    "text": "10.1 Create a new RStudio project\nThe steps here are a summary of what is found in Section 9.1.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating portable and reproducible scientific workflows</span>"
    ]
  },
  {
    "objectID": "creating-portable-reproducible-workflows.html#sec-rstudio-project",
    "href": "creating-portable-reproducible-workflows.html#sec-rstudio-project",
    "title": "10  Creating portable and reproducible scientific workflows",
    "section": "",
    "text": "Tip\n\n\n\n\nOpen RStudio\nClick on the File option in the RStudio menu. In the dropdown menu, select New Project\nIn the menu window, select New directory option.\nIn the next menu window, select New project option.\nIn the next menu window, enter the following details:\n\nName of the project - important to make the project name as short as possible but descriptive of the project you are creating; don’t use spaces, instead use dash (or underscore) and avoid using capital letters;\nSelect the directory in your computer in which you want to save the project in. Click on Browse to open your computers file manager and navigate to the directory you want to save your project in;\nTick the selection box to make this project a git repository (whilst this is not necessary, this is highly recommended especially if you are collaborating with others);\nTick the selection box to enable renv in this project (this is what mainly contribute to the portability of your project); and,\nClick on Create project",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating portable and reproducible scientific workflows</span>"
    ]
  },
  {
    "objectID": "creating-portable-reproducible-workflows.html#sec-packages-dependencies",
    "href": "creating-portable-reproducible-workflows.html#sec-packages-dependencies",
    "title": "10  Creating portable and reproducible scientific workflows",
    "section": "10.2 Create an R file for package dependencies",
    "text": "10.2 Create an R file for package dependencies\nIt is best practice to create a standalone R file specific for invoking/calling on R package dependencies. I recommend calling this file packages.R and this file should be saved in the root directory of the project you just created.\nThese are steps on how you can create this file.\n\n\n\n\n\n\nTip\n\n\n\nSteps for creating an R package dependencies file:\n\nClick on the File option in the RStudio menu. In the dropdown menu, select New File and then in the next dropdown menu, select R script.\nA new tab will open in your text editor pane of RStudio (upper left pane) with the name Untitled1. Save this file by clicking on the disk icon on the text editor menu or do a keyboard shortcut with CTRL + s. Give this empty R script the filename packages.R.\nYou should now see a file in the main directory/root directory of your project named packages.R\nAdd code in the packages.R file specifying the packages you will be using in this project. There will be standard packages that we will always use with this type of workflow. So a template/generic packages.R file will contain the following:\n\n################################################################################\n#\n#'\n#' General packages needed for a targets workflow\n#'\n#\n################################################################################\n\nlibrary(targets)\nlibrary(tarchetypes)\nlibrary(here)\nlibrary(rmarkdown)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(dplyr)\nlibrary(openxlsx)\nlibrary(ggplot2)\n\n\n################################################################################\n#\n#'\n#' Add other packages that will be used in the project below\n#'\n#\n################################################################################",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating portable and reproducible scientific workflows</span>"
    ]
  },
  {
    "objectID": "creating-portable-reproducible-workflows.html#sec-placeholder-directory",
    "href": "creating-portable-reproducible-workflows.html#sec-placeholder-directory",
    "title": "10  Creating portable and reproducible scientific workflows",
    "section": "10.3 Create placeholder directories",
    "text": "10.3 Create placeholder directories\nCreate placeholder directories for different components of the workflow.These placeholder directories will provide an organising structure to the project and remind you of where to save/store specific files and outputs.\n\n\n\n\n\n\nTip\n\n\n\nFollowing are steps on how to create placeholder directores:\n\nIn the lower right pane of RStudio (the file manager pane), find the menu button labelled Folder.\nGive this new folder the label of R. This filder will hold all bespoke functions that we will create to use for this project workflow;\nRepeat these steps to create new folders with the following labels:\n\ndata - This folder will hold any data that we retrieve as part of this workflow.\noutputs - This folder will hold all our workflow outputs such as plots/figures, tables (in Excel or CSV files), HTML and/or Word and/or PDF outputs\nreports - This folder will hold all our RMarkdown report (.Rmd) files\ndocs - This folder will hold any of our deployed outputs such as HTML report, dashboard, etc.\n\n\nThese are placeholder directories which we will populate as we work through the workflow for this project.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating portable and reproducible scientific workflows</span>"
    ]
  },
  {
    "objectID": "creating-portable-reproducible-workflows.html#sec-target-script",
    "href": "creating-portable-reproducible-workflows.html#sec-target-script",
    "title": "10  Creating portable and reproducible scientific workflows",
    "section": "10.4 Create the target script file",
    "text": "10.4 Create the target script file\nThe next task is to create a {targets} script file (_targets.R) which is the file that will define the workflow that we will be creating.\n\n\n\n\n\n\nTip\n\n\n\nThe _targets.R script file can be created through these steps:\n\nClicking on File –&gt; New File –&gt; R Script in RStudio.\nA new tab will show in your Source window on the top left quadrant of your RStudio screen. This tab will usually be called Untitled1.\nSave this file first and change its name to _targets.R. Make sure to save it in the current project directory.\nYou know that you were successful in doing this once you see a file called _targets.R in the file system window in the lower right quadrant of your RStudio screen.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating portable and reproducible scientific workflows</span>"
    ]
  },
  {
    "objectID": "creating-portable-reproducible-workflows.html#sec-edit-targets-file",
    "href": "creating-portable-reproducible-workflows.html#sec-edit-targets-file",
    "title": "10  Creating portable and reproducible scientific workflows",
    "section": "10.5 Edit the targets script file",
    "text": "10.5 Edit the targets script file\nNow, the next step is to edit your script file by adding sets of R code that does the following:\n\nLoads the packages required\nLoads custom functions (if any)\nDefines individual targets using tar_targets function\nEnds with a list of targets objects\n\nA basic {targets} workflow will look like this:\n## Load libraries --------------------------------------------------------------\nlibrary(targets)\n\n\n\n## Load custom functions -------------------------------------------------------\nfor (f in list.files(\"R\", full.names = TRUE)) source (f)\nfor (f in list.files(here::here(\"R\"), full.names = TRUE)) source (f)\n\n\n## Create targets and list targets objects -------------------------------------",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating portable and reproducible scientific workflows</span>"
    ]
  },
  {
    "objectID": "contributing-to-codehub-projects.html",
    "href": "contributing-to-codehub-projects.html",
    "title": "11  Contributing to Oxford IHTM CodeHub projects",
    "section": "",
    "text": "11.1 Research software development\nOxford IHTM CodeHub develops research software using the R package system. Our collection of research software tools are found here and the underlying code is available from our organisational GitHub.\nIf you would like to contribute to Oxford IHTM CodeHub’s software development, following is a list of steps on how to.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Contributing to Oxford IHTM CodeHub projects</span>"
    ]
  },
  {
    "objectID": "contributing-to-codehub-projects.html#sec-research-software",
    "href": "contributing-to-codehub-projects.html#sec-research-software",
    "title": "11  Contributing to Oxford IHTM CodeHub projects",
    "section": "",
    "text": "11.1.1 Get familiar with R’s package writing process\nWe build our research software tools using R. Hence, we use the R package writing process. This is described in the official R manual for writing extensions. This manual is the official reference for what is considered acceptable R software development by the R Core Team and are the guides that will ensure that your R package can pass submission and entry into the Comprehensive R Archive Network (CRAN). So, from an academic perspective, you can see this as the official guide of a publisher/publication on what your manuscript should look like so you can submit to their journal for publication. It is not a guarantee of publication, but that you are meeting their publication standards.\nHowever, the R manual for writing extensions is not as easy to navigate and not as easy to read. For beginners, we would recommend starting off with Hadley Wickham’s online book called R Packages. The book is free to use online and has clearly delineated chapters and sections for specific R package writing tasks required. We would expect anyone wanting to contribute to the CodeHub’s software development projects to have been able to go through this book.\n\n\n11.1.2 Get familiar and reach intermediate level git and GitHub skills\nOur software development process uses git and GitHub to facilitate code sharing and versioning. It is paramount that anyone wanting to contribute to any software project should have at least intermediate level git and GitHub skills. These include:\n\nCompetent in cloning and/or forking software project repositories;\nCompetent in the branching process of git and GitHub;\nCompetent in the pull request process of GitHub;\nCompetent in GitHub’s issues tracker and project tracker system;\nCompetent in code review process of GitHub.\n\nIf you want to brush up on your git and GitHub, please go through Jenny Bryan’s Happy Git and GitHub for the useR.\n\n\n11.1.3 Review our portfolio of research software\nVisit the project page of the Oxford IHTM CodeHub website - https://oxford-ihtm.io/projects/ to see our current line-up of CodeHub software projects.\nHave a look at our R Universe of research software - https://oxfordihtm.r-unviverse.dev - for the build status of each project.\nHave a look at our GitHub organisation - https://github.com/OxfordIHM - to see the code for each of these projects.\nEach project is in continuous development. We recommend looking at the repository for each of the projects, understand via the README what the project is trying to achieve and then review each projects issues page to see what the current line up of tasks or issues that the development requires. If for some reason there is no issues listed in a project, this is most likely that current developers have not gotten around to documenting their tasks/issues at hand. If so, you can make an issue to ask developers what the best task is to do for a beginner to contribute to.\n\n\n11.1.4 Communicate with developers\nOnce you have found a project and an issue that you want to work on, make a comment on that issue making sure to tag the developer/maintainer stating that you are going to have a go at this issue and then will make a pull request of your contribution.\nThis communication is important as this will trigger the developer/maintainer to confirm that you are an eligible member of the CodeHub (the pre-requisites above) and then will add you as a collaborator on the project. This step is important because your status in the project as a collaborator will determine your next step on contributing. We prefer that CodeHub members are internal collaborators as this simplifies their participation (see next section).\n\n\n11.1.5 Clone or fork the project repository\nOnce you have been added to the project repository as a collaborator, you can now clone the repository to your local machine and then start making your contribution.\nIf for some reason you haven’t been added to the project repository as a collaborator yet but you are itching to contribute, you can still start contributing but instead of cloning, you will need to fork the repository. This is similar to cloning but your fork is identified as being from someone outside the organisation. This means you will need to make your own GitHub repository under your own username of the project as a fork of the original, write your code contribution and commit to your repository and then make a pull requeset to the original repository.\nThese forking steps are described in all the CONTRIBUTING notes/guidance in each project as we open contributions from anyone (not just CodeHub members) but not all are eligible to be internal collaborators.\nWe would like to avoid this for eligible members of CodeHub so will endeavour to keep up with collaborator requests. So, if you are impatient and would really like to contribute already, consider forking but be warned that this has a lot more complicated steps than simple cloning. Either follow-up your request to be made a collaborator.",
    "crumbs": [
      "Processes",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Contributing to Oxford IHTM CodeHub projects</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Jenny Bryan, and Jim Hester. n.d. Happy Git and\nGitHub for the useR.\nAccessed September 3, 2024. https://happygitwithr.com/.",
    "crumbs": [
      "Processes",
      "References"
    ]
  }
]
# Installing R, RStudio, and Git {#install-r}

Following are the steps to installing R, RStudio, and Git depending on your operationg system.

::: {.panel-tabset}

## Windows {#setup-windows}

### Step 1: Download and install R {#install-r-windows .unnumbered}

Important that R is installed first. R is the main software and is needed for RStudio to work properly. R should always be installed first.

Go to [https://cran.r-project.org](https://cran.r-project.org) and click on the link that says ***Download R for Windows***. In the following page, click on the link that says ***install R for the first time***.

Then click on ***Download R-4.X.X for Windows*** (latest release version). This will start the download process.

Once downloaded, go to the `.exe` file in your **Downloads** folder, double-click and follow all the install prompts, selecting recommended options all the time.

### Step 2: Download and install RStudio {#install-rstudio-windows .unnumbered}

This step requires that **Step 1** has been done and was successful.

Go to [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/) and select the download specific for your Windows machine.

Once downloaded, double-click on `.exe` file downloaded to your **Downloads** folder and then follow all install prompts, always selecting recommended options.

### Step 3: Download and install `Rtools` {#install-rtools .unnumbered}

For the things that you will be taught in the **Open and Reproducibile Science** sub-module, you we will need to expand the installation of R by installing the `Rtools` software.

Go to [https://cran.r-project.org/bin/windows/Rtools/](https://cran.r-project.org/bin/windows/Rtools/) and choose to download the latest version of the installer (which is the Rtools version compatible with the R version you have installed in Step 1).

Once you have downloaded the `.exe` file, double-click on the `.exe` file and follow all install prompts. Choose all the recommended options.

### Step 4: Download and install Git for Windows {#install-git-windows .unnumbered}

For the things that you will be taught in the **Open and Reproducibile Science** sub-module, you we will need to install **Git for Windows**.

Go to this link - [https://github.com/git-for-windows/git/releases/latest](https://github.com/git-for-windows/git/releases/latest) - to download the latest version of git. Make sure to select the version compatible with your Windows machine (64-bit or 32-bit).

Once you have downloaded the `.exe` file, double-click it and then follow all install prompts. Choose all recommended options.

## macOS {#setup-macos}

### Step 1: Download and install R {#install-r-macos .unnumbered}

Important that R is installed first. R is the main software and is needed for RStudio to work properly. R should always be installed first.

Go to [https://cran.r-project.org](https://cran.r-project.org) and click on the link that says ***Download R for macOS***. In the following page, you will have two choices of R versions to install. Make sure to install the appropriate version for your macOS version (Apple Silicon vs Apple Intel version). Click on the download link for your macOS version. This will start the download process of the `.pkg` file specific for installing in macOS computers.

Once downloaded, go to the `.pkg` file in your `Downloads` folder, double-click and follow all the install prompts, selecting recommended options all the time.

### Install RStudio {#install-rstudio-macos}

This step requires that **Step 1** has been done and was successful.

Go to [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/) and select the download specific for your macOS machine.

Once downloaded, double-click on `.dmg` file downloaded to your `Downloads` folder and then follow all install prompts, always selecting recommended options.

### Install git for macOS {#install-git-macos}

For the things that you will be taught in the **Open and Reproducibile Science** sub-module, you we will need to install **git for macOS**. Apple machines are already pre-installed with `git` but it is usually an Apple specific version of git and tends to be older and not configured in the way we need it. So we need to install another version of it that comes with Apple's `Xcode command line tools`.

To install, go to the macOS terminal and type the following command:

```Terminal
xcode-select --install
```

:::

## Register a GitHub account {#github-account}

For this module, you will need a GitHub account to be able to receive the code materials and assignments that will be provided. This is the mechanism by which these materials will be distributed. Hence you will need to register an account with GitHub (if you don't already have one). It's free!

Go to [https://github.com](https://github.com) to register an account.

::: {.callout-tip}
## Tips for selecting GitHub username

Following are some advice on how to select a GitHub username from Bryan et al (REF).

* Incorporate your actual name as this lets people know who they’re dealing with and also makes your username easier for people to guess or remember.

* Reuse your username from other contexts, e.g., Twitter or Slack.

* Pick a username that will be appropriate revealing to a future boss.

* Shorter is better than longer.

* Be as unique as possible in as few characters as possible.

* Make it timeless and context-agnostic. Don’t add a date or year or a reference to your current location, university, or employer.

* Avoid the use of upper vs. lower case to separate words. We highly recommend all lowercase. A better strategy for word separation is to use a hyphen (-).
:::

## Setup Git and GitHub (Windows and macOS) {#setup-git-github}

### Introduce yourself to Git {#introduce-git}

In the shell or terminal, issue the following commands:

```Bash
git config --global user.name "YOUR NAME"
git config --global user.email "YOUR EMAIL REGISTERED WITH GITHUB"
```

Then check whether Git has indeed changed the configurations to what you have specified by looking at the output of the following shell or terminal command:

```Bash
git config --global --list
```

### Connecting Git, GitHub, and RStudio {#connect-git-github-rstudio}

1. Create a personal access token for HTTPS access to GitHub

Interacting with a remote Git server such as GitHub requires creating security credentials that proves you are a specific user (think of it as a digital ID that lets GitHub know that you are who you say you are) who is allowed to do whatever you are asking to do.

There are different ways to securely identify yourself. For our purposes, we will use HTTPS access using a `personal access token (PAT)`.

To create a token, go to https://github.com/settings/tokens

2. Name your PAT

Give this token a name that would remind you of what this token is for. We recommend calling it `rstudio` as it is the token we will use to connect/communicate with GitHub via RStudio. You can name it anything for as long as you remember what this token is for.

3. Select a validity period

It is always good practice to give the PAT a fixed validity period. Note that after said validity period, you will need to go through this process again and create a new PAT.

4. Select the appropriate scopes

For our purposes, we recommend selecting `repo`, `user`, and `workflow`.

5. Click on `Generate token`

Once you click on `Generate token`, your PAT will be shown to you on the browser window. Make sure you copy this PAT right away. Once you move away from the current browser window, the PAT will not be viewable anymore.

6. Store your PAT

It is essential that you store your PAT for future use. Treat this as you would your password. The best practice is to keep your PAT in a secure way such as using a password manager such as 1Password or LastPass.
